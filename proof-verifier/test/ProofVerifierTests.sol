// SPDX-License-Identifier: Ecosystem

pragma solidity ^0.8.17;

import {Test} from "forge-std/Test.sol";
import {ProofVerifier, EVMReceipt} from "../src/ProofVerifier.sol";

contract ProofVerifierTest is Test {
    ProofVerifier public proofVerifier;

    function setUp() public virtual {
        proofVerifier = new ProofVerifier();
    }

    function testMerkleProof() public view {
        bytes32 root = bytes32(hex"bb835b0844af56ccb779356fe3604cb8015c1c78a8e0aa7706c1805607a02dfc");
        bytes[] memory proof = new bytes[](2);
        proof[0] =
            hex"f904ab30b904a7f904a4018302ae9dbf90399f9011c94fddaffa49e71da3ef0419a303a6888f94bb5ba18f863a02bd2d8a84b748439fd50d79a49502b4eb5faa25b864da6a9ab5c150704be9a4da000000000000000000000000000000000000000000000000000000000000027f7a0000000000000000000000000225436ba1b4096afb14c374b8d1c6fd666e2fb41b8a000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000181c35064345f7f12c847a14369a5c5f18d954937fcbd85f2fa16682ba5f01b623a77c0000000000000000000000000000000000000000000000000000000000000014875bd31e6ddb05d93d5593fb605f58e1536a240e000000000000000000000000f89b940ee5d85096b82d49ea8c5130db50379c4392762ef863a0ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa00000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000d969f65444af0a194e77bc8143480a10695e946aa0000000000000000000000000000000000000000000000002545576f6faf3e4f5f89b948ac1b9086b771a00e16553bcc017c5f33de6ea96f842a0202da6c2722ee959428782559eb328b80668e3267ce37f597343103ecee7096da0000000000000000000000000d969f65444af0a194e77bc8143480a10695e946ab8407355534400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002545576f6faf3e4f5f9013d94225436ba1b4096afb14c374b8d1c6fd666e2fb41f884a07a16e522220ced7b069add7de19b89279dc43d3e4a6e27d6d9849144f40e6062a0000000000000000000000000d969f65444af0a194e77bc8143480a10695e946aa00000000000000000000000000000000000000000000000000000000000000007a000000000000000000000000000000000000000000000000000000000000027f7b8a000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000181c350000000000000000000000000000000000000000000000000000000000000028875bd31e6ddb05d93d5593fb605f58e1536a240e225436ba1b4096afb14c374b8d1c6fd666e2fb41000000000000000000000000000000000000000000000000";
        proof[1] =
            hex"f871a0e1b99764a153b94242d6f3baece6ffe9b09d5b322ebd36a3bfec07bb2021b4b7a0e9a2c1569d74ee4138caaee1c5f88c47bd55ea0bf4a83d8b2a11aaeb2222305d808080808080a0a9a89eba6acef7299b5cb3814a18eb0cc39185250802d78d92b533338055cb6f8080808080808080";
        bytes memory res = proofVerifier.verifyTrieProof(root, proof, hex"80");
        assertEq(
            res,
            hex"f904a4018302ae9dbf90399f9011c94fddaffa49e71da3ef0419a303a6888f94bb5ba18f863a02bd2d8a84b748439fd50d79a49502b4eb5faa25b864da6a9ab5c150704be9a4da000000000000000000000000000000000000000000000000000000000000027f7a0000000000000000000000000225436ba1b4096afb14c374b8d1c6fd666e2fb41b8a000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000181c35064345f7f12c847a14369a5c5f18d954937fcbd85f2fa16682ba5f01b623a77c0000000000000000000000000000000000000000000000000000000000000014875bd31e6ddb05d93d5593fb605f58e1536a240e000000000000000000000000f89b940ee5d85096b82d49ea8c5130db50379c4392762ef863a0ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa00000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000d969f65444af0a194e77bc8143480a10695e946aa0000000000000000000000000000000000000000000000002545576f6faf3e4f5f89b948ac1b9086b771a00e16553bcc017c5f33de6ea96f842a0202da6c2722ee959428782559eb328b80668e3267ce37f597343103ecee7096da0000000000000000000000000d969f65444af0a194e77bc8143480a10695e946ab8407355534400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002545576f6faf3e4f5f9013d94225436ba1b4096afb14c374b8d1c6fd666e2fb41f884a07a16e522220ced7b069add7de19b89279dc43d3e4a6e27d6d9849144f40e6062a0000000000000000000000000d969f65444af0a194e77bc8143480a10695e946aa00000000000000000000000000000000000000000000000000000000000000007a000000000000000000000000000000000000000000000000000000000000027f7b8a000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000181c350000000000000000000000000000000000000000000000000000000000000028875bd31e6ddb05d93d5593fb605f58e1536a240e225436ba1b4096afb14c374b8d1c6fd666e2fb41000000000000000000000000000000000000000000000000"
        );
    }

    function testGetReceipt() public view {
        bytes32 root = bytes32(hex"bb835b0844af56ccb779356fe3604cb8015c1c78a8e0aa7706c1805607a02dfc");
        bytes[] memory proof = new bytes[](2);
        proof[0] =
            hex"f904ab30b904a7f904a4018302ae9dbf90399f9011c94fddaffa49e71da3ef0419a303a6888f94bb5ba18f863a02bd2d8a84b748439fd50d79a49502b4eb5faa25b864da6a9ab5c150704be9a4da000000000000000000000000000000000000000000000000000000000000027f7a0000000000000000000000000225436ba1b4096afb14c374b8d1c6fd666e2fb41b8a000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000181c35064345f7f12c847a14369a5c5f18d954937fcbd85f2fa16682ba5f01b623a77c0000000000000000000000000000000000000000000000000000000000000014875bd31e6ddb05d93d5593fb605f58e1536a240e000000000000000000000000f89b940ee5d85096b82d49ea8c5130db50379c4392762ef863a0ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa00000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000d969f65444af0a194e77bc8143480a10695e946aa0000000000000000000000000000000000000000000000002545576f6faf3e4f5f89b948ac1b9086b771a00e16553bcc017c5f33de6ea96f842a0202da6c2722ee959428782559eb328b80668e3267ce37f597343103ecee7096da0000000000000000000000000d969f65444af0a194e77bc8143480a10695e946ab8407355534400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002545576f6faf3e4f5f9013d94225436ba1b4096afb14c374b8d1c6fd666e2fb41f884a07a16e522220ced7b069add7de19b89279dc43d3e4a6e27d6d9849144f40e6062a0000000000000000000000000d969f65444af0a194e77bc8143480a10695e946aa00000000000000000000000000000000000000000000000000000000000000007a000000000000000000000000000000000000000000000000000000000000027f7b8a000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000181c350000000000000000000000000000000000000000000000000000000000000028875bd31e6ddb05d93d5593fb605f58e1536a240e225436ba1b4096afb14c374b8d1c6fd666e2fb41000000000000000000000000000000000000000000000000";
        proof[1] =
            hex"f871a0e1b99764a153b94242d6f3baece6ffe9b09d5b322ebd36a3bfec07bb2021b4b7a0e9a2c1569d74ee4138caaee1c5f88c47bd55ea0bf4a83d8b2a11aaeb2222305d808080808080a0a9a89eba6acef7299b5cb3814a18eb0cc39185250802d78d92b533338055cb6f8080808080808080";
        EVMReceipt memory receipt = proofVerifier.getFirstReceipt(root, proof);
        assertEq(receipt.status, true);
        assertEq(receipt.cululativeGasUsed, 175_773);
        assertEq(
            receipt.bloom,
            hex
        );
        assertEq(receipt.logs.length, 4);
    }
}
